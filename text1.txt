{
  "errorMessage": "'NoneType' object is not subscriptable",
  "errorType": "TypeError",
  "requestId": "bd316927-5a89-481c-89e9-f940a8a129ef",
  "stackTrace": [
    "  File \"/var/task/lambda_function.py\", line 36, in lambda_handler\n    instance_id = event['detail']['instance-id']\n"
  ]
}



The principal states.amazonaws.com is not authorized to assume the provided role. (role: arn:aws:iam::563003501456:role/gwf/apps/compliance/ComplianceLambdaEC2Chenna1)

{
  "Comment": "State machine to handle EC2 instance stop alerts and escalation",
  "StartAt": "InitialCheck",
  "States": {
    "InitialCheck": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:<region>:<account-id>:function:<InitialEmailFunction>",
      "Next": "Wait1Hour"
    },
    "Wait1Hour": {
      "Type": "Wait",
      "Seconds": 3600,
      "Next": "CheckInstanceState"
    },
    "CheckInstanceState": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:<region>:<account-id>:function:<RecheckEmailFunction>",
      "End": true
    }
  }
}


Test Event Name
event1

Response
{
  "errorType": "Sandbox.Timedout",
  "errorMessage": "RequestId: ec3fd342-3d6f-480f-963f-42bf39870b2f Error: Task timed out after 3.00 seconds"
}

Function Logs
START RequestId: ec3fd342-3d6f-480f-963f-42bf39870b2f Version: $LATEST
END RequestId: ec3fd342-3d6f-480f-963f-42bf39870b2f
REPORT RequestId: ec3fd342-3d6f-480f-963f-42bf39870b2f	Duration: 3000.00 ms	Billed Duration: 3000 ms	Memory Size: 128 MB	Max Memory Used: 89 MB	Init Duration: 455.70 ms	Status: timeout

Request ID
ec3fd342-3d6f-480f-963f-42bf39870b2f

{
  "version": "0",
  "id": "c8c7bf83-0ce5-4b94-953e-0d332c7611b5",
  "detail-type": "EC2 Instance State-change Notification",
  "source": "aws.ec2",
  "account": "123456789012",
  "time": "2023-09-20T18:40:00Z",
  "region": "us-west-2",
  "resources": [
    "arn:aws:ec2:us-west-2:123456789012:instance/i-0abcd1234efgh5678"
  ],
  "detail": {
    "instance-id": "i-0abcd1234efgh5678",
    "state": "stopped"
  }
}



hello i am chenna 
{
  "version": "0",
  "id": "12345678-1234-1234-1234-1234567890ab",
  "source": "aws.ec2",
  "account": "123456789012",
  "time": "2024-09-18T10:00:00Z",
  "region": "us-west-2",
  "resources": [
    "arn:aws:ec2:us-west-2:123456789012:instance/i-0488b8da2a2809c51"
  ],
  "detail-type": "EC2 Instance State-change Notification",
  "detail": {
    "instance-id": "i-0488b8da2a2809c51",
    "state": "stopped"
  }
}

{
  "instanceId": "$.detail.instance-id",
  "state": "$.detail.state",

  "time": "$.time"
}

{
  "default": "Instance {{instanceId}} has entered the state: {{state}} at {{time}}.",
  "email": "ALERT: EC2 instance {{instanceId}} has been stopped at {{time}}. Please check the instance status immediately!"
}

{
  "default": "Instance {{instanceId}} has entered the state: {{state}} at {{time}}.",
  "email": "ALERT: EC2 instance {{instanceId}} has been stopped at {{time}}. Please check the instance status immediately!"
}
{
  "source": ["aws.ec2"],
  "detail-type": ["EC2 Instance State-change Notification"],
  "detail": {
    "state": ["stopped"],
    "instance-id": ["i-0488b8da2a2809c51"]
  }
}
Test Event Name
chennaStopInstance

Response
{
  "errorMessage": "Handler 'Hello::handleRequest' missing on module 'example'",
  "errorType": "Runtime.HandlerNotFound",
  "requestId": "",
  "stackTrace": []
}

Function Logs
[ERROR] Runtime.HandlerNotFound: Handler 'Hello::handleRequest' missing on module 'example'
Traceback (most recent call last):INIT_REPORT Init Duration: 310.36 ms	Phase: invoke	Status: error	Error Type: Runtime.Unknown
START RequestId: 84cb5abc-c4c1-4409-b195-b34f955f5c32 Version: $LATEST
END RequestId: 84cb5abc-c4c1-4409-b195-b34f955f5c32
REPORT RequestId: 84cb5abc-c4c1-4409-b195-b34f955f5c32	Duration: 341.22 ms	Billed Duration: 342 ms	Memory Size: 512 MB	Max Memory Used: 42 MB	Status: error	Error Type: Runtime.Unknown

Request ID
84cb5abc-c4c1-4409-b195-b34f955f5c32



import boto3
import time
import os

# Clients for SNS and EC2
sns_client = boto3.client('sns')
ec2_client = boto3.client('ec2')

# Function to send email via SNS
def send_email(instance_id, escalation=False):
    topic_arn = os.environ['SNS_TOPIC_ARN']  # SNS Topic ARN from environment variable
    subject = f"Instance {instance_id} {'Escalation' if escalation else ''} Alert"
    body = f"Instance {instance_id} is {'still' if escalation else ''} in a stopped state."

    response = sns_client.publish(
        TopicArn=topic_arn,
        Message=body,
        Subject=subject
    )

    return response

# Function to check the instance state
def check_instance_state(instance_id):
    response = ec2_client.describe_instance_status(InstanceIds=[instance_id])
    if response['InstanceStatuses']:
        instance_state = response['InstanceStatuses'][0]['InstanceState']['Name']
        return instance_state
    else:
        return None  # Instance not found or no state available

# Lambda handler function
def lambda_handler(event, context):
    # Get instance ID from event (triggered by EventBridge)
    instance_id = event['detail']['instance-id']
    
    # Send the initial email when the instance is first stopped
    send_email(instance_id)
    
    # Wait for 1 hour
    time.sleep(3600)  # 3600 seconds = 1 hour
    
    # Check the instance state again after 1 hour
    instance_state = check_instance_state(instance_id)
    
    # If the instance is still in 'stopped' state, send the escalation email
    if instance_state == 'stopped':
        send_email(instance_id, escalation=True)
    
    return {
        'statusCode': 200,
        'body': f'Email sent successfully for instance {instance_id}.'
    }

Test Event Name
event1

Response
{
  "errorMessage": "'detail'",
  "errorType": "KeyError",
  "requestId": "943b4064-98ae-40b4-bb88-d5bf8b59bfba",
  "stackTrace": [
    "  File \"/var/task/lambda_function.py\", line 36, in lambda_handler\n    instance_id = event['detail']['instance-id']\n"
  ]
}

Function Logs
START RequestId: 943b4064-98ae-40b4-bb88-d5bf8b59bfba Version: $LATEST
LAMBDA_WARNING: Unhandled exception. The most likely cause is an issue in the function code. However, in rare cases, a Lambda runtime update can cause unexpected function behavior. For functions using managed runtimes, runtime updates can be triggered by a function change, or can be applied automatically. To determine if the runtime has been updated, check the runtime version in the INIT_START log entry. If this error correlates with a change in the runtime version, you may be able to mitigate this error by temporarily rolling back to the previous runtime version. For more information, see https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html
[ERROR] KeyError: 'detail'
Traceback (most recent call last):
  File "/var/task/lambda_function.py", line 36, in lambda_handler
    instance_id = event['detail']['instance-id']END RequestId: 943b4064-98ae-40b4-bb88-d5bf8b59bfba
REPORT RequestId: 943b4064-98ae-40b4-bb88-d5bf8b59bfba	Duration: 6.27 ms	Billed Duration: 7 ms	Memory Size: 128 MB	Max Memory Used: 89 MB	Init Duration: 432.06 ms

Request ID
943b4064-98ae-40b4-bb88-d5bf8b59bfba
